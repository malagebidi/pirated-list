# 工作流的名称
name: Create Scheduled or Manual Release

# 工作流的触发条件
on:
  # 1. 手动触发
  workflow_dispatch:

  # 2. 定时触发
  schedule:
    # 每天 00:00 (UTC 时间) 运行一次
    - cron: '0 0 * * *'

# 定义工作流中的任务
jobs:
  build-and-release:
    # 任务的名称
    name: Build and Create Release
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest
    # 需要写入权限来创建 Release
    permissions:
      contents: write

    # 任务的执行步骤
    steps:
      # 步骤 1: 检出仓库代码
      # fetch-depth: 0 表示获取所有历史记录，以便进行比较
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤 2: 获取最新的 Release 标签
      # 如果没有 Release，这一步会失败但我们设置 continue-on-error 允许流程继续
      - name: Get latest tag
        id: get_latest_tag
        uses: jbutler/get-latest-release@v3
        with:
          # 提供 GitHub Token 以访问仓库的 releases
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # 步骤 3: 检查文件是否有变更
      # 比较最新的代码 (HEAD) 和上一个 Release 标签之间的差异
      - name: Check for file changes
        id: changed_files
        uses: tj-actions/changed-files@v44 # 使用一个专门的 action 来检查文件变更
        with:
          # 我们要比较的文件列表
          files: |
            pirated-content.txt
            pirated-game.txt
            pirated-software.txt
          # 比较的基准是上一个 Release 的标签。如果标签不存在(第一次运行)，则与仓库的第一个 commit 比较
          since_last_remote_commit: 'false'
          base_sha: ${{ steps.get_latest_tag.outputs.tag_name || '' }}

      # 步骤 4: 生成发布标签 (仅当文件有变更时运行)
      - name: Generate release tag
        if: steps.changed_files.outputs.any_changed == 'true'
        run: echo "RELEASE_TAG=$(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV

      # 步骤 5: 合并文件 (仅当文件有变更时运行)
      - name: Combine files
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          echo "Files have changed, combining into pirated-list.txt..."
          cat pirated-game.txt pirated-content.txt pirated-software.txt > pirated-list.txt
          ls -l pirated-list.txt

      # 步骤 6: 创建 Release 并上传 (仅当文件有变更时运行)
      - name: Create Release and Upload Asset
        if: steps.changed_files.outputs.any_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: pirated-list.txt
          name: Pirated List - ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          body: |
            Automated release.
            This release contains the combined list from the source .txt files.
          prerelease: false
          
      # 步骤 7: 如果没有变更则输出日志
      - name: Log if no changes
        if: steps.changed_files.outputs.any_changed != 'true'
        run: echo "No changes detected in source files since last release. Skipping new release."
