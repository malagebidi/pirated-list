name: Create Release and Update Branch

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'

jobs:
  build-and-release:
    name: Build, Release, and Push to Branch
    runs-on: ubuntu-latest
    permissions:
      # 需要 'write' 权限来创建 Release 和推送分支
      contents: write

    steps:
      # 步骤 1: 检出 main 分支的代码以获取源文件
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main # 明确指定检出 main 分支
          fetch-depth: 0

      # 步骤 2: 获取最新的 Release 标签 (用于比较)
      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(gh release view --json tagName --jq .tagName || echo "")
          echo "tag_name=${LATEST_TAG}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 3: 检查源文件是否有变更
      - name: Check for source file changes
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            pirated-content.txt
            pirated-game.txt
            pirated-software.txt
          base_sha: ${{ steps.get_latest_tag.outputs.tag_name || '' }}

      # 如果没有变更，提前结束任务
      - name: Log if no changes and stop
        if: steps.changed_files.outputs.any_changed != 'true'
        run: echo "No changes detected in source files since last release. Stopping workflow."

      # 只有在文件有变更时，才执行以下所有步骤
      - name: Run subsequent steps only if files changed
        if: steps.changed_files.outputs.any_changed == 'true'
        env:
          FILES_CHANGED: "true"
        run: echo "Source files have changed. Proceeding with build and release..."
        
      # 步骤 4: 生成并处理文件
      - name: Combine, format, sort, and deduplicate files
        if: env.FILES_CHANGED == 'true'
        run: |
          cat pirated-game.txt pirated-content.txt pirated-software.txt | \
          awk -F '.' '{
            if (NF == 2) {
              print "+."$0
            } else {
              print $0
            }
          }' | \
          sort -d -u > pirated-list.txt
          echo "Generated pirated-list.txt"

      # 步骤 5: 将生成的文件推送到 release 分支
      - name: Push pirated-list.txt to release branch
        if: env.FILES_CHANGED == 'true'
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.GITHUB_TOKEN }}
        with:
          source_file: 'pirated-list.txt'
          destination_repo: ${{ github.repository }} # 目标仓库 (即本仓库)
          destination_branch: 'release' # 目标分支
          user_email: 'github-actions@github.com'
          user_name: 'github-actions[bot]'
          commit_message: 'Update pirated-list.txt'

      # 步骤 6: 生成发布标签
      - name: Generate release tag
        if: env.FILES_CHANGED == 'true'
        id: generate_tag
        run: echo "RELEASE_TAG=$(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV

      # 步骤 7: 创建 GitHub Release
      - name: Create GitHub Release
        if: env.FILES_CHANGED == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: pirated-list.txt
          name: Pirated List - ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          body: |
            Automated release.
            This release contains the combined list from the source .txt files.
          prerelease: false
